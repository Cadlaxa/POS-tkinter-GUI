
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path as P
import tkinter as tk
from tkinter import Tk, Canvas, Button, PhotoImage
from ruamel.yaml import YAML
import subprocess

OUTPUT_PATH = P().parent
ASSETS_PATH = OUTPUT_PATH / P(r"Assets/categ_frame")
ACCOUNTS_DIR = P('./Accounts')
ACCOUNTS_DIR.mkdir(exist_ok=True)
USERS_FILE = ACCOUNTS_DIR / 'users.yaml'
ICON = P('./Assets/logour.png')
yaml = YAML()

# Function to read user data from the YAML file
def read_users():
    if USERS_FILE.exists():
        with open(USERS_FILE, "r") as file:
            return yaml.load(file) or {}
    return {}

def relative_to_assets(path: str) -> P:
    return ASSETS_PATH / P(path)

class ToolTip:
    def __init__(self, widget):
        self.widget = widget
        self.tip_window = None

    def show_tip(self, event, text):
        if self.tip_window or not event:
            return
        x = event.x_root + 20
        y = event.y_root + 20
        self.tip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry("+%d+%d" % (x, y))
        label = tk.Label(tw, text=text, justify=tk.LEFT,
                         background="#F0F3F6", relief=tk.SOLID, borderwidth=1,
                         font=("Montserrat SemiBold", 10))
        label.pack(ipadx=1)

    def hide_tip(self, event):
        tw = self.tip_window
        self.tip_window = None
        if tw:
            tw.destroy()

    def update_position(self, event):
        if self.tip_window:
            x = event.x_root + 20
            y = event.y_root + 20
            self.tip_window.wm_geometry("+%d+%d" % (x, y))

def signup_script():
    script_path = "Scripts/signup.py"
    subprocess.run(['python', script_path])

def forgot_script():
    script_path = "Scripts/I_forgot.py"
    subprocess.run(['python', script_path])

def icon(window):
    img = PhotoImage(file=ICON)
    window.tk.call('wm', 'iconphoto', window._w, img)

window = Tk()
window.geometry("1143x619")
window.configure(bg="#FFFFFF")
window.title("Welcome to Arti-san")
icon(window)

canvas = Canvas(window, bg="#FFFFFF", height=619, width=1143, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)
canvas.create_rectangle(0.0, 0.0, 1143.0, 619.3824462890625, fill="#FFFFFF", outline="")

grad_header = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(570.9906005859375, 60.4459228515625, image=grad_header)

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(571.0, 365.0, image=image_image_2)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(571.0, 396.0, image=image_image_3)

logo = PhotoImage(file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(63.9810791015625, 60.89190673828125, image=logo)

canvas.create_text(110.0, 38.0, anchor="nw", text="Arti-san", fill="#FFFFFF", font=("Montserrat Black", 32 * -1))

# Items on Cart
items_img = PhotoImage(file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(990.0, 60.0, image=items_img)
canvas.create_text(935.0, 47.0, anchor="nw", text="Items on cart:", fill="#FFFFFF", font=("Montserrat SemiBold", 16 * -1))
# Numbers on cart
canvas.create_text(1060.0, 47.0, anchor="nw", text="0", fill="#FFFFFF", font=("Montserrat SemiBold", 16 * -1))
cart_img = PhotoImage(file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(914.0, 60.0, image=cart_img)

# Header text
image_image_7 = PhotoImage(file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(572.0, 64.0, image=image_image_7)
image_image_8 = PhotoImage(file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(571.0, 61.0, image=image_image_8)
canvas.create_text(470.0, 37.0, anchor="nw", text="Hello There!", fill="#FFFFFF", font=("Montserrat SemiBold", 32 * -1))

# Class A (Resin)
resin_img = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(image=resin_img, borderwidth=0, highlightthickness=0, command=lambda: print("button_1 clicked"), relief="flat")
button_1.place(x=577.0, y=211.0, width=531.0, height=178.0)
button_image_hover_1 = PhotoImage(file=relative_to_assets("button_hover_1.png"))
def button_1_hover(e):
    button_1.config(image=button_image_hover_1)
def button_1_leave(e):
    button_1.config(image=resin_img)
button_1.bind('<Enter>', button_1_hover)
button_1.bind('<Leave>', button_1_leave)
# Create and bind the tooltip
tooltip_1 = ToolTip(button_1)
def on_enter_1(event):
    button_1_hover(event)
    tooltip_1.show_tip(event, "cupkakke \n jiafei.")
def on_leave_1(event):
    button_1_leave(event)
    tooltip_1.hide_tip(event)
def on_motion_1(event):
    tooltip_1.update_position(event)
button_1.bind('<Enter>', on_enter_1)
button_1.bind('<Leave>', on_leave_1)
button_1.bind('<Motion>', on_motion_1)

# Original (authentic)
orig_img = PhotoImage(file=relative_to_assets("button_2.png"))
button_2 = Button(image=orig_img, borderwidth=0, highlightthickness=0, command=lambda: print("button_2 clicked"), relief="flat")
button_2.place(x=36.0, y=211.0, width=527.0, height=178.0)
button_image_hover_2 = PhotoImage(file=relative_to_assets("button_hover_2.png"))
def button_2_hover(e):
    button_2.config(image=button_image_hover_2)
def button_2_leave(e):
    button_2.config(image=orig_img)
button_2.bind('<Enter>', button_2_hover)
button_2.bind('<Leave>', button_2_leave)
# Create and bind the tooltip
tooltip_2 = ToolTip(button_2)
def on_enter_2(event):
    button_2_hover(event)
    tooltip_2.show_tip(event, "si vhal and si ano HAHAHHHH.")
def on_leave_2(event):
    button_2_leave(event)
    tooltip_2.hide_tip(event)
def on_motion_2(event):
    tooltip_2.update_position(event)
button_2.bind('<Enter>', on_enter_2)
button_2.bind('<Leave>', on_leave_2)
button_2.bind('<Motion>', on_motion_2)

# Cartoon
cartoon_img = PhotoImage(file=relative_to_assets("button_3.png"))
button_3 = Button(image=cartoon_img, borderwidth=0, highlightthickness=0, command=lambda: print("button_3 clicked"), relief="flat")
button_3.place(x=577.0, y=401.0, width=531.0, height=178.0)
button_image_hover_3 = PhotoImage(file=relative_to_assets("button_hover_3.png"))
def button_3_hover(e):
    button_3.config(image=button_image_hover_3)
def button_3_leave(e):
    button_3.config(image=cartoon_img)
button_3.bind('<Enter>', button_3_hover)
button_3.bind('<Leave>', button_3_leave)
# Create and bind the tooltip
tooltip_3 = ToolTip(button_3)
def on_enter_3(event):
    button_3_hover(event)
    tooltip_3.show_tip(event, "test placeholder.")
def on_leave_3(event):
    button_3_leave(event)
    tooltip_3.hide_tip(event)
def on_motion_3(event):
    tooltip_3.update_position(event)
button_3.bind('<Enter>', on_enter_3)
button_3.bind('<Leave>', on_leave_3)
button_3.bind('<Motion>', on_motion_3)

# Nendoroid
nendo_img = PhotoImage(file=relative_to_assets("button_4.png"))
button_4 = Button(image=nendo_img, borderwidth=0, highlightthickness=0, command=lambda: print("button_4 clicked"), relief="flat")
button_4.place(x=37.0, y=402.0, width=527.0, height=178.0)
button_image_hover_4 = PhotoImage(file=relative_to_assets("button_hover_4.png"))
def button_4_hover(e):
    button_4.config(image=button_image_hover_4)
def button_4_leave(e):
    button_4.config(image=nendo_img)
button_4.bind('<Enter>', button_4_hover)
button_4.bind('<Leave>', button_4_leave)
# Create and bind the tooltip
tooltip_4 = ToolTip(button_4)
def on_enter_4(event):
    button_4_hover(event)
    tooltip_4.show_tip(event, "tooltip\ntest\nplaceholder.")
def on_leave_4(event):
    button_4_leave(event)
    tooltip_4.hide_tip(event)
def on_motion_4(event):
    tooltip_4.update_position(event)
button_4.bind('<Enter>', on_enter_4)
button_4.bind('<Leave>', on_leave_4)
button_4.bind('<Motion>', on_motion_4)

window.resizable(False, False)
window.mainloop()